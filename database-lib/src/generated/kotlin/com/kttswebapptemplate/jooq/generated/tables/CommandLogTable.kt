/*
 * This file is generated by jOOQ.
 */
package com.kttswebapptemplate.jooq.generated.tables

import com.kttswebapptemplate.database.jooq.converter.TimestampWithTimeZoneToInstantJooqConverter
import com.kttswebapptemplate.jooq.generated.PublicTable
import com.kttswebapptemplate.jooq.generated.keys.COMMAND_LOG_PKEY
import com.kttswebapptemplate.jooq.generated.keys.COMMAND_LOG__COMMAND_LOG_DEPLOYMENT_LOG_ID_FKEY
import com.kttswebapptemplate.jooq.generated.tables.DeploymentLogTable.DeploymentLogPath
import com.kttswebapptemplate.jooq.generated.tables.records.CommandLogRecord
import java.time.Instant
import java.util.UUID
import kotlin.collections.Collection
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

/** This class is generated by jOOQ. */
@Suppress("UNCHECKED_CAST")
open class CommandLogTable(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, CommandLogRecord>?,
    parentPath: InverseForeignKey<out Record, CommandLogRecord>?,
    aliased: Table<CommandLogRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
) :
    TableImpl<CommandLogRecord>(
        alias,
        PublicTable.PUBLIC,
        path,
        childPath,
        parentPath,
        aliased,
        parameters,
        DSL.comment(""),
        TableOptions.table(),
        where,
    ) {
    companion object {

        /** The reference instance of <code>public.command_log</code> */
        val COMMAND_LOG: CommandLogTable = CommandLogTable()
    }

    /** The class holding records for this type */
    override fun getRecordType(): Class<CommandLogRecord> = CommandLogRecord::class.java

    /** The column <code>public.command_log.id</code>. */
    val ID: TableField<CommandLogRecord, UUID?> =
        createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "")

    /** The column <code>public.command_log.user_id</code>. */
    val USER_ID: TableField<CommandLogRecord, UUID?> =
        createField(DSL.name("user_id"), SQLDataType.UUID, this, "")

    /** The column <code>public.command_log.affected_user_id</code>. */
    val AFFECTED_USER_ID: TableField<CommandLogRecord, UUID?> =
        createField(DSL.name("affected_user_id"), SQLDataType.UUID, this, "")

    /** The column <code>public.command_log.deployment_log_id</code>. */
    val DEPLOYMENT_LOG_ID: TableField<CommandLogRecord, UUID?> =
        createField(DSL.name("deployment_log_id"), SQLDataType.UUID.nullable(false), this, "")

    /** The column <code>public.command_log.command_class</code>. */
    val COMMAND_CLASS: TableField<CommandLogRecord, String?> =
        createField(DSL.name("command_class"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /** The column <code>public.command_log.json_command</code>. */
    val JSON_COMMAND: TableField<CommandLogRecord, String?> =
        createField(DSL.name("json_command"), SQLDataType.CLOB.nullable(false), this, "")

    /** The column <code>public.command_log.ip</code>. */
    val IP: TableField<CommandLogRecord, String?> =
        createField(DSL.name("ip"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /** The column <code>public.command_log.user_session_id</code>. */
    val USER_SESSION_ID: TableField<CommandLogRecord, UUID?> =
        createField(DSL.name("user_session_id"), SQLDataType.UUID, this, "")

    /** The column <code>public.command_log.ids_log</code>. */
    val IDS_LOG: TableField<CommandLogRecord, String?> =
        createField(DSL.name("ids_log"), SQLDataType.CLOB.nullable(false), this, "")

    /** The column <code>public.command_log.json_result</code>. */
    val JSON_RESULT: TableField<CommandLogRecord, String?> =
        createField(DSL.name("json_result"), SQLDataType.CLOB, this, "")

    /** The column <code>public.command_log.exception_stack_trace</code>. */
    val EXCEPTION_STACK_TRACE: TableField<CommandLogRecord, String?> =
        createField(DSL.name("exception_stack_trace"), SQLDataType.CLOB, this, "")

    /** The column <code>public.command_log.start_date</code>. */
    val START_DATE: TableField<CommandLogRecord, Instant?> =
        createField(
            DSL.name("start_date"),
            SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false),
            this,
            "",
            TimestampWithTimeZoneToInstantJooqConverter())

    /** The column <code>public.command_log.end_date</code>. */
    val END_DATE: TableField<CommandLogRecord, Instant?> =
        createField(
            DSL.name("end_date"),
            SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false),
            this,
            "",
            TimestampWithTimeZoneToInstantJooqConverter())

    private constructor(
        alias: Name,
        aliased: Table<CommandLogRecord>?
    ) : this(alias, null, null, null, aliased, null, null)

    private constructor(
        alias: Name,
        aliased: Table<CommandLogRecord>?,
        parameters: Array<Field<*>?>?
    ) : this(alias, null, null, null, aliased, parameters, null)

    private constructor(
        alias: Name,
        aliased: Table<CommandLogRecord>?,
        where: Condition
    ) : this(alias, null, null, null, aliased, null, where)

    /** Create an aliased <code>public.command_log</code> table reference */
    constructor(alias: String) : this(DSL.name(alias))

    /** Create an aliased <code>public.command_log</code> table reference */
    constructor(alias: Name) : this(alias, null)

    /** Create a <code>public.command_log</code> table reference */
    constructor() : this(DSL.name("command_log"), null)

    constructor(
        path: Table<out Record>,
        childPath: ForeignKey<out Record, CommandLogRecord>?,
        parentPath: InverseForeignKey<out Record, CommandLogRecord>?
    ) : this(
        Internal.createPathAlias(path, childPath, parentPath),
        path,
        childPath,
        parentPath,
        COMMAND_LOG,
        null,
        null)

    /** A subtype implementing {@link Path} for simplified path-based joins. */
    open class CommandLogPath : CommandLogTable, Path<CommandLogRecord> {
        constructor(
            path: Table<out Record>,
            childPath: ForeignKey<out Record, CommandLogRecord>?,
            parentPath: InverseForeignKey<out Record, CommandLogRecord>?
        ) : super(path, childPath, parentPath)

        private constructor(alias: Name, aliased: Table<CommandLogRecord>) : super(alias, aliased)

        override fun `as`(alias: String): CommandLogPath = CommandLogPath(DSL.name(alias), this)

        override fun `as`(alias: Name): CommandLogPath = CommandLogPath(alias, this)

        override fun `as`(alias: Table<*>): CommandLogPath =
            CommandLogPath(alias.qualifiedName, this)
    }

    override fun getSchema(): Schema? = if (aliased()) null else PublicTable.PUBLIC

    override fun getPrimaryKey(): UniqueKey<CommandLogRecord> = COMMAND_LOG_PKEY

    override fun getReferences(): List<ForeignKey<CommandLogRecord, *>> =
        listOf(COMMAND_LOG__COMMAND_LOG_DEPLOYMENT_LOG_ID_FKEY)

    private lateinit var _deploymentLog: DeploymentLogPath

    /** Get the implicit join path to the <code>public.deployment_log</code> table. */
    fun deploymentLog(): DeploymentLogPath {
        if (!this::_deploymentLog.isInitialized)
            _deploymentLog =
                DeploymentLogPath(this, COMMAND_LOG__COMMAND_LOG_DEPLOYMENT_LOG_ID_FKEY, null)

        return _deploymentLog
    }

    val deploymentLog: DeploymentLogPath
        get(): DeploymentLogPath = deploymentLog()

    override fun `as`(alias: String): CommandLogTable = CommandLogTable(DSL.name(alias), this)

    override fun `as`(alias: Name): CommandLogTable = CommandLogTable(alias, this)

    override fun `as`(alias: Table<*>): CommandLogTable = CommandLogTable(alias.qualifiedName, this)

    /** Rename this table */
    override fun rename(name: String): CommandLogTable = CommandLogTable(DSL.name(name), null)

    /** Rename this table */
    override fun rename(name: Name): CommandLogTable = CommandLogTable(name, null)

    /** Rename this table */
    override fun rename(name: Table<*>): CommandLogTable = CommandLogTable(name.qualifiedName, null)

    /** Create an inline derived table from this table */
    override fun where(condition: Condition): CommandLogTable =
        CommandLogTable(qualifiedName, if (aliased()) this else null, condition)

    /** Create an inline derived table from this table */
    override fun where(conditions: Collection<Condition>): CommandLogTable =
        where(DSL.and(conditions))

    /** Create an inline derived table from this table */
    override fun where(vararg conditions: Condition): CommandLogTable = where(DSL.and(*conditions))

    /** Create an inline derived table from this table */
    override fun where(condition: Field<Boolean?>): CommandLogTable =
        where(DSL.condition(condition))

    /** Create an inline derived table from this table */
    @PlainSQL override fun where(condition: SQL): CommandLogTable = where(DSL.condition(condition))

    /** Create an inline derived table from this table */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String): CommandLogTable =
        where(DSL.condition(condition))

    /** Create an inline derived table from this table */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg binds: Any?): CommandLogTable =
        where(DSL.condition(condition, *binds))

    /** Create an inline derived table from this table */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): CommandLogTable =
        where(DSL.condition(condition, *parts))

    /** Create an inline derived table from this table */
    override fun whereExists(select: Select<*>): CommandLogTable = where(DSL.exists(select))

    /** Create an inline derived table from this table */
    override fun whereNotExists(select: Select<*>): CommandLogTable = where(DSL.notExists(select))
}
