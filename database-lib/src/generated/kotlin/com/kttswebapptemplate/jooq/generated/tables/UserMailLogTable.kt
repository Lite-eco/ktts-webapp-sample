/*
 * This file is generated by jOOQ.
 */
package com.kttswebapptemplate.jooq.generated.tables

import com.kttswebapptemplate.database.jooq.converter.TimestampWithTimeZoneToInstantJooqConverter
import com.kttswebapptemplate.jooq.generated.PublicTable
import com.kttswebapptemplate.jooq.generated.indexes.USER_MAIL_LOG_USER_ID_IDX
import com.kttswebapptemplate.jooq.generated.keys.USER_ACCOUNT_OPERATION_TOKEN__USER_ACCOUNT_OPERATION_TOKEN_USER_MAIL_LOG_ID_FKEY
import com.kttswebapptemplate.jooq.generated.keys.USER_MAIL_LOG_PKEY
import com.kttswebapptemplate.jooq.generated.keys.USER_MAIL_LOG__USER_MAIL_LOG_USER_ID_FKEY
import com.kttswebapptemplate.jooq.generated.tables.AppUserTable.AppUserPath
import com.kttswebapptemplate.jooq.generated.tables.UserAccountOperationTokenTable.UserAccountOperationTokenPath
import com.kttswebapptemplate.jooq.generated.tables.records.UserMailLogRecord
import java.time.Instant
import java.util.UUID
import kotlin.collections.Collection
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

/** This class is generated by jOOQ. */
@Suppress("UNCHECKED_CAST")
open class UserMailLogTable(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, UserMailLogRecord>?,
    parentPath: InverseForeignKey<out Record, UserMailLogRecord>?,
    aliased: Table<UserMailLogRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
) :
    TableImpl<UserMailLogRecord>(
        alias,
        PublicTable.PUBLIC,
        path,
        childPath,
        parentPath,
        aliased,
        parameters,
        DSL.comment(""),
        TableOptions.table(),
        where,
    ) {
    companion object {

        /** The reference instance of <code>public.user_mail_log</code> */
        val USER_MAIL_LOG: UserMailLogTable = UserMailLogTable()
    }

    /** The class holding records for this type */
    override fun getRecordType(): Class<UserMailLogRecord> = UserMailLogRecord::class.java

    /** The column <code>public.user_mail_log.id</code>. */
    val ID: TableField<UserMailLogRecord, UUID?> =
        createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "")

    /** The column <code>public.user_mail_log.user_id</code>. */
    val USER_ID: TableField<UserMailLogRecord, UUID?> =
        createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "")

    /** The column <code>public.user_mail_log.mail</code>. */
    val MAIL: TableField<UserMailLogRecord, String?> =
        createField(DSL.name("mail"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /** The column <code>public.user_mail_log.dirty_mail</code>. */
    val DIRTY_MAIL: TableField<UserMailLogRecord, String?> =
        createField(DSL.name("dirty_mail"), SQLDataType.VARCHAR(255), this, "")

    /** The column <code>public.user_mail_log.validated</code>. */
    val VALIDATED: TableField<UserMailLogRecord, Boolean?> =
        createField(DSL.name("validated"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /** The column <code>public.user_mail_log.creation_date</code>. */
    val CREATION_DATE: TableField<UserMailLogRecord, Instant?> =
        createField(
            DSL.name("creation_date"),
            SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false),
            this,
            "",
            TimestampWithTimeZoneToInstantJooqConverter())

    /** The column <code>public.user_mail_log.validated_update</code>. */
    val VALIDATED_UPDATE: TableField<UserMailLogRecord, Instant?> =
        createField(
            DSL.name("validated_update"),
            SQLDataType.TIMESTAMPWITHTIMEZONE(6),
            this,
            "",
            TimestampWithTimeZoneToInstantJooqConverter())

    private constructor(
        alias: Name,
        aliased: Table<UserMailLogRecord>?
    ) : this(alias, null, null, null, aliased, null, null)

    private constructor(
        alias: Name,
        aliased: Table<UserMailLogRecord>?,
        parameters: Array<Field<*>?>?
    ) : this(alias, null, null, null, aliased, parameters, null)

    private constructor(
        alias: Name,
        aliased: Table<UserMailLogRecord>?,
        where: Condition
    ) : this(alias, null, null, null, aliased, null, where)

    /** Create an aliased <code>public.user_mail_log</code> table reference */
    constructor(alias: String) : this(DSL.name(alias))

    /** Create an aliased <code>public.user_mail_log</code> table reference */
    constructor(alias: Name) : this(alias, null)

    /** Create a <code>public.user_mail_log</code> table reference */
    constructor() : this(DSL.name("user_mail_log"), null)

    constructor(
        path: Table<out Record>,
        childPath: ForeignKey<out Record, UserMailLogRecord>?,
        parentPath: InverseForeignKey<out Record, UserMailLogRecord>?
    ) : this(
        Internal.createPathAlias(path, childPath, parentPath),
        path,
        childPath,
        parentPath,
        USER_MAIL_LOG,
        null,
        null)

    /** A subtype implementing {@link Path} for simplified path-based joins. */
    open class UserMailLogPath : UserMailLogTable, Path<UserMailLogRecord> {
        constructor(
            path: Table<out Record>,
            childPath: ForeignKey<out Record, UserMailLogRecord>?,
            parentPath: InverseForeignKey<out Record, UserMailLogRecord>?
        ) : super(path, childPath, parentPath)

        private constructor(alias: Name, aliased: Table<UserMailLogRecord>) : super(alias, aliased)

        override fun `as`(alias: String): UserMailLogPath = UserMailLogPath(DSL.name(alias), this)

        override fun `as`(alias: Name): UserMailLogPath = UserMailLogPath(alias, this)

        override fun `as`(alias: Table<*>): UserMailLogPath =
            UserMailLogPath(alias.qualifiedName, this)
    }

    override fun getSchema(): Schema? = if (aliased()) null else PublicTable.PUBLIC

    override fun getIndexes(): List<Index> = listOf(USER_MAIL_LOG_USER_ID_IDX)

    override fun getPrimaryKey(): UniqueKey<UserMailLogRecord> = USER_MAIL_LOG_PKEY

    override fun getReferences(): List<ForeignKey<UserMailLogRecord, *>> =
        listOf(USER_MAIL_LOG__USER_MAIL_LOG_USER_ID_FKEY)

    private lateinit var _appUser: AppUserPath

    /** Get the implicit join path to the <code>public.app_user</code> table. */
    fun appUser(): AppUserPath {
        if (!this::_appUser.isInitialized)
            _appUser = AppUserPath(this, USER_MAIL_LOG__USER_MAIL_LOG_USER_ID_FKEY, null)

        return _appUser
    }

    val appUser: AppUserPath
        get(): AppUserPath = appUser()

    private lateinit var _userAccountOperationToken: UserAccountOperationTokenPath

    /**
     * Get the implicit to-many join path to the <code>public.user_account_operation_token</code>
     * table
     */
    fun userAccountOperationToken(): UserAccountOperationTokenPath {
        if (!this::_userAccountOperationToken.isInitialized)
            _userAccountOperationToken =
                UserAccountOperationTokenPath(
                    this,
                    null,
                    USER_ACCOUNT_OPERATION_TOKEN__USER_ACCOUNT_OPERATION_TOKEN_USER_MAIL_LOG_ID_FKEY
                        .inverseKey)

        return _userAccountOperationToken
    }

    val userAccountOperationToken: UserAccountOperationTokenPath
        get(): UserAccountOperationTokenPath = userAccountOperationToken()

    override fun `as`(alias: String): UserMailLogTable = UserMailLogTable(DSL.name(alias), this)

    override fun `as`(alias: Name): UserMailLogTable = UserMailLogTable(alias, this)

    override fun `as`(alias: Table<*>): UserMailLogTable =
        UserMailLogTable(alias.qualifiedName, this)

    /** Rename this table */
    override fun rename(name: String): UserMailLogTable = UserMailLogTable(DSL.name(name), null)

    /** Rename this table */
    override fun rename(name: Name): UserMailLogTable = UserMailLogTable(name, null)

    /** Rename this table */
    override fun rename(name: Table<*>): UserMailLogTable =
        UserMailLogTable(name.qualifiedName, null)

    /** Create an inline derived table from this table */
    override fun where(condition: Condition): UserMailLogTable =
        UserMailLogTable(qualifiedName, if (aliased()) this else null, condition)

    /** Create an inline derived table from this table */
    override fun where(conditions: Collection<Condition>): UserMailLogTable =
        where(DSL.and(conditions))

    /** Create an inline derived table from this table */
    override fun where(vararg conditions: Condition): UserMailLogTable = where(DSL.and(*conditions))

    /** Create an inline derived table from this table */
    override fun where(condition: Field<Boolean?>): UserMailLogTable =
        where(DSL.condition(condition))

    /** Create an inline derived table from this table */
    @PlainSQL override fun where(condition: SQL): UserMailLogTable = where(DSL.condition(condition))

    /** Create an inline derived table from this table */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String): UserMailLogTable =
        where(DSL.condition(condition))

    /** Create an inline derived table from this table */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg binds: Any?): UserMailLogTable =
        where(DSL.condition(condition, *binds))

    /** Create an inline derived table from this table */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): UserMailLogTable =
        where(DSL.condition(condition, *parts))

    /** Create an inline derived table from this table */
    override fun whereExists(select: Select<*>): UserMailLogTable = where(DSL.exists(select))

    /** Create an inline derived table from this table */
    override fun whereNotExists(select: Select<*>): UserMailLogTable = where(DSL.notExists(select))
}
