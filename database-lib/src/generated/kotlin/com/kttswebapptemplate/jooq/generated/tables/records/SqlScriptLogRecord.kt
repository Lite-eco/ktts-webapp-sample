/*
 * This file is generated by jOOQ.
 */
package com.kttswebapptemplate.jooq.generated.tables.records

import com.kttswebapptemplate.jooq.generated.tables.SqlScriptLogTable
import java.time.Instant
import java.util.UUID
import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record5
import org.jooq.Row5
import org.jooq.impl.UpdatableRecordImpl

/** This class is generated by jOOQ. */
@Suppress("UNCHECKED_CAST")
open class SqlScriptLogRecord private constructor() :
    UpdatableRecordImpl<SqlScriptLogRecord>(SqlScriptLogTable.SQL_SCRIPT_LOG),
    Record5<UUID?, String?, String?, Instant?, Instant?> {

    open var id: UUID
        set(value): Unit = set(0, value)
        get(): UUID = get(0) as UUID

    open var script: String
        set(value): Unit = set(1, value)
        get(): String = get(1) as String

    open var comment: String
        set(value): Unit = set(2, value)
        get(): String = get(2) as String

    open var runDate: Instant?
        set(value): Unit = set(3, value)
        get(): Instant? = get(3) as Instant?

    open var insertDate: Instant
        set(value): Unit = set(4, value)
        get(): Instant = get(4) as Instant

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row5<UUID?, String?, String?, Instant?, Instant?> =
        super.fieldsRow() as Row5<UUID?, String?, String?, Instant?, Instant?>

    override fun valuesRow(): Row5<UUID?, String?, String?, Instant?, Instant?> =
        super.valuesRow() as Row5<UUID?, String?, String?, Instant?, Instant?>

    override fun field1(): Field<UUID?> = SqlScriptLogTable.SQL_SCRIPT_LOG.ID

    override fun field2(): Field<String?> = SqlScriptLogTable.SQL_SCRIPT_LOG.SCRIPT

    override fun field3(): Field<String?> = SqlScriptLogTable.SQL_SCRIPT_LOG.COMMENT

    override fun field4(): Field<Instant?> = SqlScriptLogTable.SQL_SCRIPT_LOG.RUN_DATE

    override fun field5(): Field<Instant?> = SqlScriptLogTable.SQL_SCRIPT_LOG.INSERT_DATE

    override fun component1(): UUID = id

    override fun component2(): String = script

    override fun component3(): String = comment

    override fun component4(): Instant? = runDate

    override fun component5(): Instant = insertDate

    override fun value1(): UUID = id

    override fun value2(): String = script

    override fun value3(): String = comment

    override fun value4(): Instant? = runDate

    override fun value5(): Instant = insertDate

    override fun value1(value: UUID?): SqlScriptLogRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): SqlScriptLogRecord {
        set(1, value)
        return this
    }

    override fun value3(value: String?): SqlScriptLogRecord {
        set(2, value)
        return this
    }

    override fun value4(value: Instant?): SqlScriptLogRecord {
        set(3, value)
        return this
    }

    override fun value5(value: Instant?): SqlScriptLogRecord {
        set(4, value)
        return this
    }

    override fun values(
        value1: UUID?,
        value2: String?,
        value3: String?,
        value4: Instant?,
        value5: Instant?
    ): SqlScriptLogRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        return this
    }

    /** Create a detached, initialised SqlScriptLogRecord */
    constructor(
        id: UUID,
        script: String,
        comment: String,
        runDate: Instant? = null,
        insertDate: Instant
    ) : this() {
        this.id = id
        this.script = script
        this.comment = comment
        this.runDate = runDate
        this.insertDate = insertDate
        resetChangedOnNotNull()
    }
}
