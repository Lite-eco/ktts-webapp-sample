/*
 * This file is generated by jOOQ.
 */
package com.kttswebapptemplate.jooq.generated.tables

import com.kttswebapptemplate.database.jooq.converter.TimestampWithTimeZoneToInstantJooqConverter
import com.kttswebapptemplate.jooq.generated.PublicTable
import com.kttswebapptemplate.jooq.generated.keys.COMMAND_LOG__COMMAND_LOG_DEPLOYMENT_LOG_ID_FKEY
import com.kttswebapptemplate.jooq.generated.keys.DEPLOYMENT_LOG_PKEY
import com.kttswebapptemplate.jooq.generated.tables.CommandLogTable.CommandLogPath
import com.kttswebapptemplate.jooq.generated.tables.records.DeploymentLogRecord
import java.time.Instant
import java.util.UUID
import kotlin.collections.Collection
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

/** This class is generated by jOOQ. */
@Suppress("UNCHECKED_CAST")
open class DeploymentLogTable(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, DeploymentLogRecord>?,
    parentPath: InverseForeignKey<out Record, DeploymentLogRecord>?,
    aliased: Table<DeploymentLogRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
) :
    TableImpl<DeploymentLogRecord>(
        alias,
        PublicTable.PUBLIC,
        path,
        childPath,
        parentPath,
        aliased,
        parameters,
        DSL.comment(""),
        TableOptions.table(),
        where,
    ) {
    companion object {

        /** The reference instance of <code>public.deployment_log</code> */
        val DEPLOYMENT_LOG: DeploymentLogTable = DeploymentLogTable()
    }

    /** The class holding records for this type */
    override fun getRecordType(): Class<DeploymentLogRecord> = DeploymentLogRecord::class.java

    /** The column <code>public.deployment_log.id</code>. */
    val ID: TableField<DeploymentLogRecord, UUID?> =
        createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "")

    /** The column <code>public.deployment_log.build_version</code>. */
    val BUILD_VERSION: TableField<DeploymentLogRecord, String?> =
        createField(DSL.name("build_version"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /** The column <code>public.deployment_log.system_zone_id</code>. */
    val SYSTEM_ZONE_ID: TableField<DeploymentLogRecord, String?> =
        createField(DSL.name("system_zone_id"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /** The column <code>public.deployment_log.startup_date</code>. */
    val STARTUP_DATE: TableField<DeploymentLogRecord, Instant?> =
        createField(
            DSL.name("startup_date"),
            SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false),
            this,
            "",
            TimestampWithTimeZoneToInstantJooqConverter())

    /** The column <code>public.deployment_log.shutdown_date</code>. */
    val SHUTDOWN_DATE: TableField<DeploymentLogRecord, Instant?> =
        createField(
            DSL.name("shutdown_date"),
            SQLDataType.TIMESTAMPWITHTIMEZONE(6),
            this,
            "",
            TimestampWithTimeZoneToInstantJooqConverter())

    private constructor(
        alias: Name,
        aliased: Table<DeploymentLogRecord>?
    ) : this(alias, null, null, null, aliased, null, null)

    private constructor(
        alias: Name,
        aliased: Table<DeploymentLogRecord>?,
        parameters: Array<Field<*>?>?
    ) : this(alias, null, null, null, aliased, parameters, null)

    private constructor(
        alias: Name,
        aliased: Table<DeploymentLogRecord>?,
        where: Condition
    ) : this(alias, null, null, null, aliased, null, where)

    /** Create an aliased <code>public.deployment_log</code> table reference */
    constructor(alias: String) : this(DSL.name(alias))

    /** Create an aliased <code>public.deployment_log</code> table reference */
    constructor(alias: Name) : this(alias, null)

    /** Create a <code>public.deployment_log</code> table reference */
    constructor() : this(DSL.name("deployment_log"), null)

    constructor(
        path: Table<out Record>,
        childPath: ForeignKey<out Record, DeploymentLogRecord>?,
        parentPath: InverseForeignKey<out Record, DeploymentLogRecord>?
    ) : this(
        Internal.createPathAlias(path, childPath, parentPath),
        path,
        childPath,
        parentPath,
        DEPLOYMENT_LOG,
        null,
        null)

    /** A subtype implementing {@link Path} for simplified path-based joins. */
    open class DeploymentLogPath : DeploymentLogTable, Path<DeploymentLogRecord> {
        constructor(
            path: Table<out Record>,
            childPath: ForeignKey<out Record, DeploymentLogRecord>?,
            parentPath: InverseForeignKey<out Record, DeploymentLogRecord>?
        ) : super(path, childPath, parentPath)

        private constructor(
            alias: Name,
            aliased: Table<DeploymentLogRecord>
        ) : super(alias, aliased)

        override fun `as`(alias: String): DeploymentLogPath =
            DeploymentLogPath(DSL.name(alias), this)

        override fun `as`(alias: Name): DeploymentLogPath = DeploymentLogPath(alias, this)

        override fun `as`(alias: Table<*>): DeploymentLogPath =
            DeploymentLogPath(alias.qualifiedName, this)
    }

    override fun getSchema(): Schema? = if (aliased()) null else PublicTable.PUBLIC

    override fun getPrimaryKey(): UniqueKey<DeploymentLogRecord> = DEPLOYMENT_LOG_PKEY

    private lateinit var _commandLog: CommandLogPath

    /** Get the implicit to-many join path to the <code>public.command_log</code> table */
    fun commandLog(): CommandLogPath {
        if (!this::_commandLog.isInitialized)
            _commandLog =
                CommandLogPath(
                    this, null, COMMAND_LOG__COMMAND_LOG_DEPLOYMENT_LOG_ID_FKEY.inverseKey)

        return _commandLog
    }

    val commandLog: CommandLogPath
        get(): CommandLogPath = commandLog()

    override fun `as`(alias: String): DeploymentLogTable = DeploymentLogTable(DSL.name(alias), this)

    override fun `as`(alias: Name): DeploymentLogTable = DeploymentLogTable(alias, this)

    override fun `as`(alias: Table<*>): DeploymentLogTable =
        DeploymentLogTable(alias.qualifiedName, this)

    /** Rename this table */
    override fun rename(name: String): DeploymentLogTable = DeploymentLogTable(DSL.name(name), null)

    /** Rename this table */
    override fun rename(name: Name): DeploymentLogTable = DeploymentLogTable(name, null)

    /** Rename this table */
    override fun rename(name: Table<*>): DeploymentLogTable =
        DeploymentLogTable(name.qualifiedName, null)

    /** Create an inline derived table from this table */
    override fun where(condition: Condition): DeploymentLogTable =
        DeploymentLogTable(qualifiedName, if (aliased()) this else null, condition)

    /** Create an inline derived table from this table */
    override fun where(conditions: Collection<Condition>): DeploymentLogTable =
        where(DSL.and(conditions))

    /** Create an inline derived table from this table */
    override fun where(vararg conditions: Condition): DeploymentLogTable =
        where(DSL.and(*conditions))

    /** Create an inline derived table from this table */
    override fun where(condition: Field<Boolean?>): DeploymentLogTable =
        where(DSL.condition(condition))

    /** Create an inline derived table from this table */
    @PlainSQL
    override fun where(condition: SQL): DeploymentLogTable = where(DSL.condition(condition))

    /** Create an inline derived table from this table */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String): DeploymentLogTable =
        where(DSL.condition(condition))

    /** Create an inline derived table from this table */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg binds: Any?): DeploymentLogTable =
        where(DSL.condition(condition, *binds))

    /** Create an inline derived table from this table */
    @PlainSQL
    override fun where(
        @Stringly.SQL condition: String,
        vararg parts: QueryPart
    ): DeploymentLogTable = where(DSL.condition(condition, *parts))

    /** Create an inline derived table from this table */
    override fun whereExists(select: Select<*>): DeploymentLogTable = where(DSL.exists(select))

    /** Create an inline derived table from this table */
    override fun whereNotExists(select: Select<*>): DeploymentLogTable =
        where(DSL.notExists(select))
}
