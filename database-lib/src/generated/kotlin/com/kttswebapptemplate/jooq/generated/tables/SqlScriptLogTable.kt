/*
 * This file is generated by jOOQ.
 */
package com.kttswebapptemplate.jooq.generated.tables

import com.kttswebapptemplate.database.jooq.converter.TimestampWithTimeZoneToInstantJooqConverter
import com.kttswebapptemplate.jooq.generated.PublicTable
import com.kttswebapptemplate.jooq.generated.keys.SQL_SCRIPT_LOG_PKEY
import com.kttswebapptemplate.jooq.generated.tables.records.SqlScriptLogRecord
import java.time.Instant
import java.util.UUID
import kotlin.collections.Collection
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

/** This class is generated by jOOQ. */
@Suppress("UNCHECKED_CAST")
open class SqlScriptLogTable(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, SqlScriptLogRecord>?,
    parentPath: InverseForeignKey<out Record, SqlScriptLogRecord>?,
    aliased: Table<SqlScriptLogRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
) :
    TableImpl<SqlScriptLogRecord>(
        alias,
        PublicTable.PUBLIC,
        path,
        childPath,
        parentPath,
        aliased,
        parameters,
        DSL.comment(""),
        TableOptions.table(),
        where,
    ) {
    companion object {

        /** The reference instance of <code>public.sql_script_log</code> */
        val SQL_SCRIPT_LOG: SqlScriptLogTable = SqlScriptLogTable()
    }

    /** The class holding records for this type */
    override fun getRecordType(): Class<SqlScriptLogRecord> = SqlScriptLogRecord::class.java

    /** The column <code>public.sql_script_log.id</code>. */
    val ID: TableField<SqlScriptLogRecord, UUID?> =
        createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "")

    /** The column <code>public.sql_script_log.script</code>. */
    val SCRIPT: TableField<SqlScriptLogRecord, String?> =
        createField(DSL.name("script"), SQLDataType.CLOB.nullable(false), this, "")

    /** The column <code>public.sql_script_log.comment</code>. */
    val COMMENT: TableField<SqlScriptLogRecord, String?> =
        createField(DSL.name("comment"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /** The column <code>public.sql_script_log.run_date</code>. */
    val RUN_DATE: TableField<SqlScriptLogRecord, Instant?> =
        createField(
            DSL.name("run_date"),
            SQLDataType.TIMESTAMPWITHTIMEZONE(6),
            this,
            "",
            TimestampWithTimeZoneToInstantJooqConverter())

    /** The column <code>public.sql_script_log.insert_date</code>. */
    val INSERT_DATE: TableField<SqlScriptLogRecord, Instant?> =
        createField(
            DSL.name("insert_date"),
            SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false),
            this,
            "",
            TimestampWithTimeZoneToInstantJooqConverter())

    private constructor(
        alias: Name,
        aliased: Table<SqlScriptLogRecord>?
    ) : this(alias, null, null, null, aliased, null, null)

    private constructor(
        alias: Name,
        aliased: Table<SqlScriptLogRecord>?,
        parameters: Array<Field<*>?>?
    ) : this(alias, null, null, null, aliased, parameters, null)

    private constructor(
        alias: Name,
        aliased: Table<SqlScriptLogRecord>?,
        where: Condition
    ) : this(alias, null, null, null, aliased, null, where)

    /** Create an aliased <code>public.sql_script_log</code> table reference */
    constructor(alias: String) : this(DSL.name(alias))

    /** Create an aliased <code>public.sql_script_log</code> table reference */
    constructor(alias: Name) : this(alias, null)

    /** Create a <code>public.sql_script_log</code> table reference */
    constructor() : this(DSL.name("sql_script_log"), null)

    override fun getSchema(): Schema? = if (aliased()) null else PublicTable.PUBLIC

    override fun getPrimaryKey(): UniqueKey<SqlScriptLogRecord> = SQL_SCRIPT_LOG_PKEY

    override fun `as`(alias: String): SqlScriptLogTable = SqlScriptLogTable(DSL.name(alias), this)

    override fun `as`(alias: Name): SqlScriptLogTable = SqlScriptLogTable(alias, this)

    override fun `as`(alias: Table<*>): SqlScriptLogTable =
        SqlScriptLogTable(alias.qualifiedName, this)

    /** Rename this table */
    override fun rename(name: String): SqlScriptLogTable = SqlScriptLogTable(DSL.name(name), null)

    /** Rename this table */
    override fun rename(name: Name): SqlScriptLogTable = SqlScriptLogTable(name, null)

    /** Rename this table */
    override fun rename(name: Table<*>): SqlScriptLogTable =
        SqlScriptLogTable(name.qualifiedName, null)

    /** Create an inline derived table from this table */
    override fun where(condition: Condition): SqlScriptLogTable =
        SqlScriptLogTable(qualifiedName, if (aliased()) this else null, condition)

    /** Create an inline derived table from this table */
    override fun where(conditions: Collection<Condition>): SqlScriptLogTable =
        where(DSL.and(conditions))

    /** Create an inline derived table from this table */
    override fun where(vararg conditions: Condition): SqlScriptLogTable =
        where(DSL.and(*conditions))

    /** Create an inline derived table from this table */
    override fun where(condition: Field<Boolean?>): SqlScriptLogTable =
        where(DSL.condition(condition))

    /** Create an inline derived table from this table */
    @PlainSQL
    override fun where(condition: SQL): SqlScriptLogTable = where(DSL.condition(condition))

    /** Create an inline derived table from this table */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String): SqlScriptLogTable =
        where(DSL.condition(condition))

    /** Create an inline derived table from this table */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg binds: Any?): SqlScriptLogTable =
        where(DSL.condition(condition, *binds))

    /** Create an inline derived table from this table */
    @PlainSQL
    override fun where(
        @Stringly.SQL condition: String,
        vararg parts: QueryPart
    ): SqlScriptLogTable = where(DSL.condition(condition, *parts))

    /** Create an inline derived table from this table */
    override fun whereExists(select: Select<*>): SqlScriptLogTable = where(DSL.exists(select))

    /** Create an inline derived table from this table */
    override fun whereNotExists(select: Select<*>): SqlScriptLogTable = where(DSL.notExists(select))
}
