/*
 * This file is generated by jOOQ.
 */
package com.kttswebapptemplate.jooq.generated.tables

import com.kttswebapptemplate.database.jooq.converter.TimestampWithTimeZoneToInstantJooqConverter
import com.kttswebapptemplate.jooq.generated.PublicTable
import com.kttswebapptemplate.jooq.generated.keys.SQL_SCRIPT_LOG_PKEY
import com.kttswebapptemplate.jooq.generated.tables.records.SqlScriptLogRecord
import java.time.Instant
import java.util.UUID
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row5
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

/** This class is generated by jOOQ. */
@Suppress("UNCHECKED_CAST")
open class SqlScriptLogTable(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, SqlScriptLogRecord>?,
    aliased: Table<SqlScriptLogRecord>?,
    parameters: Array<Field<*>?>?
) :
    TableImpl<SqlScriptLogRecord>(
        alias,
        PublicTable.PUBLIC,
        child,
        path,
        aliased,
        parameters,
        DSL.comment(""),
        TableOptions.table()) {
    companion object {

        /** The reference instance of <code>public.sql_script_log</code> */
        val SQL_SCRIPT_LOG: SqlScriptLogTable = SqlScriptLogTable()
    }

    /** The class holding records for this type */
    override fun getRecordType(): Class<SqlScriptLogRecord> = SqlScriptLogRecord::class.java

    /** The column <code>public.sql_script_log.id</code>. */
    val ID: TableField<SqlScriptLogRecord, UUID?> =
        createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "")

    /** The column <code>public.sql_script_log.script</code>. */
    val SCRIPT: TableField<SqlScriptLogRecord, String?> =
        createField(DSL.name("script"), SQLDataType.CLOB.nullable(false), this, "")

    /** The column <code>public.sql_script_log.comment</code>. */
    val COMMENT: TableField<SqlScriptLogRecord, String?> =
        createField(DSL.name("comment"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /** The column <code>public.sql_script_log.run_date</code>. */
    val RUN_DATE: TableField<SqlScriptLogRecord, Instant?> =
        createField(
            DSL.name("run_date"),
            SQLDataType.TIMESTAMPWITHTIMEZONE(6),
            this,
            "",
            TimestampWithTimeZoneToInstantJooqConverter())

    /** The column <code>public.sql_script_log.insert_date</code>. */
    val INSERT_DATE: TableField<SqlScriptLogRecord, Instant?> =
        createField(
            DSL.name("insert_date"),
            SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false),
            this,
            "",
            TimestampWithTimeZoneToInstantJooqConverter())

    private constructor(
        alias: Name,
        aliased: Table<SqlScriptLogRecord>?
    ) : this(alias, null, null, aliased, null)

    private constructor(
        alias: Name,
        aliased: Table<SqlScriptLogRecord>?,
        parameters: Array<Field<*>?>?
    ) : this(alias, null, null, aliased, parameters)

    /** Create an aliased <code>public.sql_script_log</code> table reference */
    constructor(alias: String) : this(DSL.name(alias))

    /** Create an aliased <code>public.sql_script_log</code> table reference */
    constructor(alias: Name) : this(alias, null)

    /** Create a <code>public.sql_script_log</code> table reference */
    constructor() : this(DSL.name("sql_script_log"), null)

    constructor(
        child: Table<out Record>,
        key: ForeignKey<out Record, SqlScriptLogRecord>
    ) : this(Internal.createPathAlias(child, key), child, key, SQL_SCRIPT_LOG, null)

    override fun getSchema(): Schema? = if (aliased()) null else PublicTable.PUBLIC

    override fun getPrimaryKey(): UniqueKey<SqlScriptLogRecord> = SQL_SCRIPT_LOG_PKEY

    override fun `as`(alias: String): SqlScriptLogTable = SqlScriptLogTable(DSL.name(alias), this)

    override fun `as`(alias: Name): SqlScriptLogTable = SqlScriptLogTable(alias, this)

    override fun `as`(alias: Table<*>): SqlScriptLogTable =
        SqlScriptLogTable(alias.getQualifiedName(), this)

    /** Rename this table */
    override fun rename(name: String): SqlScriptLogTable = SqlScriptLogTable(DSL.name(name), null)

    /** Rename this table */
    override fun rename(name: Name): SqlScriptLogTable = SqlScriptLogTable(name, null)

    /** Rename this table */
    override fun rename(name: Table<*>): SqlScriptLogTable =
        SqlScriptLogTable(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row5<UUID?, String?, String?, Instant?, Instant?> =
        super.fieldsRow() as Row5<UUID?, String?, String?, Instant?, Instant?>

    /** Convenience mapping calling {@link SelectField#convertFrom(Function)}. */
    fun <U> mapping(from: (UUID?, String?, String?, Instant?, Instant?) -> U): SelectField<U> =
        convertFrom(Records.mapping(from))

    /** Convenience mapping calling {@link SelectField#convertFrom(Class, Function)}. */
    fun <U> mapping(
        toType: Class<U>,
        from: (UUID?, String?, String?, Instant?, Instant?) -> U
    ): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
