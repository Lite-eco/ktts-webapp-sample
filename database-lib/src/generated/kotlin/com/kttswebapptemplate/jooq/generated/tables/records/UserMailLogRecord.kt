/*
 * This file is generated by jOOQ.
 */
package com.kttswebapptemplate.jooq.generated.tables.records

import com.kttswebapptemplate.jooq.generated.tables.UserMailLogTable
import java.time.Instant
import java.util.UUID
import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl

/** This class is generated by jOOQ. */
@Suppress("UNCHECKED_CAST")
open class UserMailLogRecord private constructor() :
    UpdatableRecordImpl<UserMailLogRecord>(UserMailLogTable.USER_MAIL_LOG) {

    open var id: UUID
        set(value): Unit = set(0, value)
        get(): UUID = get(0) as UUID

    open var userId: UUID
        set(value): Unit = set(1, value)
        get(): UUID = get(1) as UUID

    open var mail: String
        set(value): Unit = set(2, value)
        get(): String = get(2) as String

    open var dirtyMail: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var validated: Boolean
        set(value): Unit = set(4, value)
        get(): Boolean = get(4) as Boolean

    open var creationDate: Instant
        set(value): Unit = set(5, value)
        get(): Instant = get(5) as Instant

    open var validatedUpdate: Instant?
        set(value): Unit = set(6, value)
        get(): Instant? = get(6) as Instant?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    /** Create a detached, initialised UserMailLogRecord */
    constructor(
        id: UUID,
        userId: UUID,
        mail: String,
        dirtyMail: String? = null,
        validated: Boolean,
        creationDate: Instant,
        validatedUpdate: Instant? = null
    ) : this() {
        this.id = id
        this.userId = userId
        this.mail = mail
        this.dirtyMail = dirtyMail
        this.validated = validated
        this.creationDate = creationDate
        this.validatedUpdate = validatedUpdate
        resetChangedOnNotNull()
    }
}
