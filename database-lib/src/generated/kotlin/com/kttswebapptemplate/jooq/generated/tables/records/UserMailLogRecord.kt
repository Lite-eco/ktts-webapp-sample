/*
 * This file is generated by jOOQ.
 */
package com.kttswebapptemplate.jooq.generated.tables.records

import com.kttswebapptemplate.jooq.generated.tables.UserMailLogTable
import java.time.Instant
import java.util.UUID
import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record7
import org.jooq.Row7
import org.jooq.impl.UpdatableRecordImpl

/** This class is generated by jOOQ. */
@Suppress("UNCHECKED_CAST")
open class UserMailLogRecord private constructor() :
    UpdatableRecordImpl<UserMailLogRecord>(UserMailLogTable.USER_MAIL_LOG),
    Record7<UUID?, UUID?, String?, String?, Boolean?, Instant?, Instant?> {

    open var id: UUID
        set(value): Unit = set(0, value)
        get(): UUID = get(0) as UUID

    open var userId: UUID
        set(value): Unit = set(1, value)
        get(): UUID = get(1) as UUID

    open var mail: String
        set(value): Unit = set(2, value)
        get(): String = get(2) as String

    open var dirtyMail: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var validated: Boolean
        set(value): Unit = set(4, value)
        get(): Boolean = get(4) as Boolean

    open var creationDate: Instant
        set(value): Unit = set(5, value)
        get(): Instant = get(5) as Instant

    open var validatedUpdate: Instant?
        set(value): Unit = set(6, value)
        get(): Instant? = get(6) as Instant?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row7<UUID?, UUID?, String?, String?, Boolean?, Instant?, Instant?> =
        super.fieldsRow() as Row7<UUID?, UUID?, String?, String?, Boolean?, Instant?, Instant?>

    override fun valuesRow(): Row7<UUID?, UUID?, String?, String?, Boolean?, Instant?, Instant?> =
        super.valuesRow() as Row7<UUID?, UUID?, String?, String?, Boolean?, Instant?, Instant?>

    override fun field1(): Field<UUID?> = UserMailLogTable.USER_MAIL_LOG.ID

    override fun field2(): Field<UUID?> = UserMailLogTable.USER_MAIL_LOG.USER_ID

    override fun field3(): Field<String?> = UserMailLogTable.USER_MAIL_LOG.MAIL

    override fun field4(): Field<String?> = UserMailLogTable.USER_MAIL_LOG.DIRTY_MAIL

    override fun field5(): Field<Boolean?> = UserMailLogTable.USER_MAIL_LOG.VALIDATED

    override fun field6(): Field<Instant?> = UserMailLogTable.USER_MAIL_LOG.CREATION_DATE

    override fun field7(): Field<Instant?> = UserMailLogTable.USER_MAIL_LOG.VALIDATED_UPDATE

    override fun component1(): UUID = id

    override fun component2(): UUID = userId

    override fun component3(): String = mail

    override fun component4(): String? = dirtyMail

    override fun component5(): Boolean = validated

    override fun component6(): Instant = creationDate

    override fun component7(): Instant? = validatedUpdate

    override fun value1(): UUID = id

    override fun value2(): UUID = userId

    override fun value3(): String = mail

    override fun value4(): String? = dirtyMail

    override fun value5(): Boolean = validated

    override fun value6(): Instant = creationDate

    override fun value7(): Instant? = validatedUpdate

    override fun value1(value: UUID?): UserMailLogRecord {
        set(0, value)
        return this
    }

    override fun value2(value: UUID?): UserMailLogRecord {
        set(1, value)
        return this
    }

    override fun value3(value: String?): UserMailLogRecord {
        set(2, value)
        return this
    }

    override fun value4(value: String?): UserMailLogRecord {
        set(3, value)
        return this
    }

    override fun value5(value: Boolean?): UserMailLogRecord {
        set(4, value)
        return this
    }

    override fun value6(value: Instant?): UserMailLogRecord {
        set(5, value)
        return this
    }

    override fun value7(value: Instant?): UserMailLogRecord {
        set(6, value)
        return this
    }

    override fun values(
        value1: UUID?,
        value2: UUID?,
        value3: String?,
        value4: String?,
        value5: Boolean?,
        value6: Instant?,
        value7: Instant?
    ): UserMailLogRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        return this
    }

    /** Create a detached, initialised UserMailLogRecord */
    constructor(
        id: UUID,
        userId: UUID,
        mail: String,
        dirtyMail: String? = null,
        validated: Boolean,
        creationDate: Instant,
        validatedUpdate: Instant? = null
    ) : this() {
        this.id = id
        this.userId = userId
        this.mail = mail
        this.dirtyMail = dirtyMail
        this.validated = validated
        this.creationDate = creationDate
        this.validatedUpdate = validatedUpdate
        resetChangedOnNotNull()
    }
}
